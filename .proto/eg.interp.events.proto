syntax = "proto3";

package eg.interp.events;

message RunMetadata { bytes id = 1; }

message LogHeader {
  int32 Major = 1;
  int32 Minor = 2;
  int32 Patch = 3;
  int64 sts = 4;
  int64 ets = 5;
}

// heartbeat event
message Heartbeat {}

message Op {
  enum State {
    Initiated = 0;
    Completed = 1;
    Error = 1000;
  }
  State state = 1 [ json_name = "state" ];
  int64 milliseconds = 2
      [ json_name = "millisecond" ]; // duration milliseconds.
  string name = 3 [ json_name = "name" ];
  string module = 4 [ json_name = "module" ];
  string op = 5 [ json_name = "op" ];
  reserved 6 to 999;
  repeated string path = 1000 [ json_name = "path" ];
}

// metric event contains a json set of fields
message Metric {
  string name = 1;
  reserved 2 to 999;
  bytes fieldsJSON = 1000;
}

// Represents every message recorded when executing a job
message Message {
  string id = 1; // uuid v7
  int64 ts = 2;  // unix timestamp.

  oneof Event {
    LogHeader preamble = 100;
    Heartbeat heartbeat = 101;
    Op op = 102;
    Metric metric = 103;
  }
}

message RunUploadChunk {
  message Metadata {
    uint64 bytes = 1;
    bytes checksum = 2;
  }

  bytes data = 1;
  bytes checksum = 2;
  oneof initialChunkMetadata {
    bool none = 3;
    Metadata metadata = 4;
  }
}

message RunUploadResponse { RunMetadata run = 1; }

message RunLogRequest { RunMetadata run = 1; }
message RunLogResponse { bytes content = 1; }

message RunInitiateRequest {}
message RunInitiateResult {}

message RunCancelRequest {}
message RunCancelResponse {}

message RunWatchRequest { RunMetadata run = 1; }

service Agent {
  rpc Upload(stream RunUploadChunk) returns (RunUploadResponse) {}
  rpc Cancel(RunCancelRequest) returns (RunCancelResponse) {}
  rpc Logs(RunLogRequest) returns (stream RunLogResponse) {}
  rpc Watch(RunWatchRequest) returns (stream Message) {}
}

message DispatchRequest { repeated Message messages = 1; }

message DispatchResponse {}

service Events {
  rpc Dispatch(DispatchRequest) returns (DispatchResponse) {}
}

service Runner {
  rpc Dispatch(DispatchRequest) returns (DispatchResponse) {}
}
