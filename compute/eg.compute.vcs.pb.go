// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.31.1
// source: eg.compute.vcs.proto

package compute

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GitCredentialsAutomatic struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GitCredentialsAutomatic) Reset() {
	*x = GitCredentialsAutomatic{}
	mi := &file_eg_compute_vcs_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GitCredentialsAutomatic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitCredentialsAutomatic) ProtoMessage() {}

func (x *GitCredentialsAutomatic) ProtoReflect() protoreflect.Message {
	mi := &file_eg_compute_vcs_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitCredentialsAutomatic.ProtoReflect.Descriptor instead.
func (*GitCredentialsAutomatic) Descriptor() ([]byte, []int) {
	return file_eg_compute_vcs_proto_rawDescGZIP(), []int{0}
}

type GitCredentialsHTTP struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Username      string                 `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password      string                 `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GitCredentialsHTTP) Reset() {
	*x = GitCredentialsHTTP{}
	mi := &file_eg_compute_vcs_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GitCredentialsHTTP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitCredentialsHTTP) ProtoMessage() {}

func (x *GitCredentialsHTTP) ProtoReflect() protoreflect.Message {
	mi := &file_eg_compute_vcs_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitCredentialsHTTP.ProtoReflect.Descriptor instead.
func (*GitCredentialsHTTP) Descriptor() ([]byte, []int) {
	return file_eg_compute_vcs_proto_rawDescGZIP(), []int{1}
}

func (x *GitCredentialsHTTP) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *GitCredentialsHTTP) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type GitAccessCredentials struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Credentials:
	//
	//	*GitAccessCredentials_Automatic
	//	*GitAccessCredentials_GitHttp
	Credentials   isGitAccessCredentials_Credentials `protobuf_oneof:"Credentials"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GitAccessCredentials) Reset() {
	*x = GitAccessCredentials{}
	mi := &file_eg_compute_vcs_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GitAccessCredentials) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitAccessCredentials) ProtoMessage() {}

func (x *GitAccessCredentials) ProtoReflect() protoreflect.Message {
	mi := &file_eg_compute_vcs_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitAccessCredentials.ProtoReflect.Descriptor instead.
func (*GitAccessCredentials) Descriptor() ([]byte, []int) {
	return file_eg_compute_vcs_proto_rawDescGZIP(), []int{2}
}

func (x *GitAccessCredentials) GetCredentials() isGitAccessCredentials_Credentials {
	if x != nil {
		return x.Credentials
	}
	return nil
}

func (x *GitAccessCredentials) GetAutomatic() *GitCredentialsAutomatic {
	if x != nil {
		if x, ok := x.Credentials.(*GitAccessCredentials_Automatic); ok {
			return x.Automatic
		}
	}
	return nil
}

func (x *GitAccessCredentials) GetGitHttp() *GitCredentialsHTTP {
	if x != nil {
		if x, ok := x.Credentials.(*GitAccessCredentials_GitHttp); ok {
			return x.GitHttp
		}
	}
	return nil
}

type isGitAccessCredentials_Credentials interface {
	isGitAccessCredentials_Credentials()
}

type GitAccessCredentials_Automatic struct {
	Automatic *GitCredentialsAutomatic `protobuf:"bytes,100,opt,name=automatic,proto3,oneof"`
}

type GitAccessCredentials_GitHttp struct {
	GitHttp *GitCredentialsHTTP `protobuf:"bytes,101,opt,name=git_http,json=gitHttp,proto3,oneof"`
}

func (*GitAccessCredentials_Automatic) isGitAccessCredentials_Credentials() {}

func (*GitAccessCredentials_GitHttp) isGitAccessCredentials_Credentials() {}

var File_eg_compute_vcs_proto protoreflect.FileDescriptor

const file_eg_compute_vcs_proto_rawDesc = "" +
	"\n" +
	"\x14eg.compute.vcs.proto\x12\n" +
	"eg.compute\"\x19\n" +
	"\x17GitCredentialsAutomatic\"L\n" +
	"\x12GitCredentialsHTTP\x12\x1a\n" +
	"\busername\x18\x01 \x01(\tR\busername\x12\x1a\n" +
	"\bpassword\x18\x02 \x01(\tR\bpassword\"\xa7\x01\n" +
	"\x14GitAccessCredentials\x12C\n" +
	"\tautomatic\x18d \x01(\v2#.eg.compute.GitCredentialsAutomaticH\x00R\tautomatic\x12;\n" +
	"\bgit_http\x18e \x01(\v2\x1e.eg.compute.GitCredentialsHTTPH\x00R\agitHttpB\r\n" +
	"\vCredentialsb\x06proto3"

var (
	file_eg_compute_vcs_proto_rawDescOnce sync.Once
	file_eg_compute_vcs_proto_rawDescData []byte
)

func file_eg_compute_vcs_proto_rawDescGZIP() []byte {
	file_eg_compute_vcs_proto_rawDescOnce.Do(func() {
		file_eg_compute_vcs_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_eg_compute_vcs_proto_rawDesc), len(file_eg_compute_vcs_proto_rawDesc)))
	})
	return file_eg_compute_vcs_proto_rawDescData
}

var file_eg_compute_vcs_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_eg_compute_vcs_proto_goTypes = []any{
	(*GitCredentialsAutomatic)(nil), // 0: eg.compute.GitCredentialsAutomatic
	(*GitCredentialsHTTP)(nil),      // 1: eg.compute.GitCredentialsHTTP
	(*GitAccessCredentials)(nil),    // 2: eg.compute.GitAccessCredentials
}
var file_eg_compute_vcs_proto_depIdxs = []int32{
	0, // 0: eg.compute.GitAccessCredentials.automatic:type_name -> eg.compute.GitCredentialsAutomatic
	1, // 1: eg.compute.GitAccessCredentials.git_http:type_name -> eg.compute.GitCredentialsHTTP
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_eg_compute_vcs_proto_init() }
func file_eg_compute_vcs_proto_init() {
	if File_eg_compute_vcs_proto != nil {
		return
	}
	file_eg_compute_vcs_proto_msgTypes[2].OneofWrappers = []any{
		(*GitAccessCredentials_Automatic)(nil),
		(*GitAccessCredentials_GitHttp)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_eg_compute_vcs_proto_rawDesc), len(file_eg_compute_vcs_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_eg_compute_vcs_proto_goTypes,
		DependencyIndexes: file_eg_compute_vcs_proto_depIdxs,
		MessageInfos:      file_eg_compute_vcs_proto_msgTypes,
	}.Build()
	File_eg_compute_vcs_proto = out.File
	file_eg_compute_vcs_proto_goTypes = nil
	file_eg_compute_vcs_proto_depIdxs = nil
}
