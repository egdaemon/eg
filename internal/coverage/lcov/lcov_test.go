package lcov_test

import (
	"testing"

	"github.com/egdaemon/eg/internal/coverage"
	"github.com/egdaemon/eg/internal/coverage/lcov"
	"github.com/egdaemon/eg/internal/slicesx"
	"github.com/egdaemon/eg/internal/testx"
	"github.com/stretchr/testify/require"
)

func TestStatementCoverage(t *testing.T) {
	ctx, done := testx.Context(t)
	defer done()

	var (
		reports []*coverage.Report
	)

	for rep, err := range lcov.Parse(ctx, testx.Read(".fixtures", "example1.lcov.info")) {
		require.NoError(t, err)
		require.NotNil(t, rep)
		reports = append(reports, rep)
	}

	require.Equal(t, 314, len(reports))
	require.Equal(t, []float32{
		0, 53.571426, 0, 0, 0, 0, 100, 50, 100, 0, 0, 0, 0, 0, 100, 50, 27.272728, 0, 59.375, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 77.77778, 21.428572, 33.870968, 37.31343, 37.5, 8.849558, 37.333332, 0, 23.834198, 0, 0, 60.975613, 26.258993, 0, 0, 0, 0, 0, 0, 0, 14.035088, 17.647058, 19.607843, 23.529411, 14.285715, 0, 59.64912, 20, 11.764706, 52.803738, 20, 0, 0, 0, 0, 0, 0, 21.774193, 100, 26.666668, 0, 45.454548, 0, 0, 54.36893, 37.5, 0, 0, 0, 0, 42.156864, 0, 67.42424, 0, 8.064516, 0, 53.46939, 12.5, 0, 0, 0, 0, 0, 0, 81.818184, 0, 42.857143, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31.707317, 0, 0, 0, 22.666668, 0, 63.529415, 83.72093, 14.285715, 26.923079, 82.051285, 36.666668, 69.64286, 30.000002, 27.631578, 0, 76.5625, 0, 0, 68.965515, 88.2353, 0, 13.861386, 37.5, 100, 100, 100, 100, 100, 0, 26.31579, 100, 15.625, 100, 100, 0, 15.384616, 0, 100, 76.47059, 100, 0, 100, 35.08772, 0, 44.444447, 22.580645, 37.5, 33.333336, 100, 23.809525, 62.5, 13.793103, 15.000001, 8.823529, 10.344828, 26.666668, 31.25, 0, 100, 0, 100, 26.666668, 25, 21.428572, 100, 40, 100, 6.382979, 36.363636, 21.428572, 15.789473, 22.727274, 15.789473, 17.647058, 10.714286, 100, 15.789473, 17.647058, 9.375, 100, 13.636364, 16.666668, 33.333336, 19.444445, 42.105263, 25, 13.333334, 17.647058, 15.000001, 100, 0, 24.528303, 74.666664, 33.333336, 14.285715, 38.88889, 0, 100, 100, 81.818184, 37.5, 10.714286, 47.61905, 0, 24.333334, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 37.5, 100, 16, 11.627908, 9.9009905, 27.272728, 24.13793, 38.636364, 69.230774, 14.285715, 13.953489, 7.3529415, 100, 0, 100, 0, 0, 0, 25.757576, 56.521736, 0, 0, 27.5, 17.142859, 20.895523, 20, 50, 10, 100, 27.155172, 23.15271, 0, 25.757576, 0, 41.791046, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62.318836, 100, 100, 9.090909, 100, 100, 27.777779, 93.650795, 0, 0, 0, 0, 0, 0, 0, 0,
	}, slicesx.MapTransform(func(c *coverage.Report) float32 { return c.Statements }, reports...))
	require.Equal(t, []float32{
		0, 100, 0, 0, 0, 100, 100, 0, 0, 100, 0, 0, 100, 100, 50, 100, 0, 0, 100, 100, 100, 0, 100, 100, 100, 0, 0, 100, 100, 0, 100, 100, 100, 0, 100, 100, 0, 0, 0, 0, 80, 80, 0, 0, 100, 100, 100, 0, 0, 100, 100, 100, 0, 0, 100, 0, 100, 0, 0, 0, 0, 0, 0, 100, 71.42857, 0, 0, 66.66667, 0, 100, 100, 100, 0, 100, 100, 100, 0, 100, 0, 100, 100, 0, 100, 0, 100, 100, 0, 0, 100, 0, 66.66667, 0, 0, 100, 66.66667, 0, 100, 100, 100, 100, 0, 100, 100, 100, 100, 100, 100, 0, 100, 100, 100, 0, 100, 0, 0, 0, 100, 100, 0, 100, 0, 0, 100, 62.5, 100, 0, 100, 100, 25, 0, 100, 0, 40, 0, 0, 100, 100, 0, 100, 100, 25, 100, 0, 100, 0, 100, 0, 25, 0, 100, 0, 0, 0, 0, 100, 100, 0, 0, 100, 100, 0, 0, 100, 0, 0, 0, 0, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 0, 0, 0, 100, 100, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 83.33333, 100, 0, 0, 0, 60.000004, 0, 100, 0, 0, 100, 0, 100, 100, 0, 100, 0, 100, 100, 0, 100, 100, 0, 0, 100, 100, 0, 100, 0, 0, 100, 0, 0, 100, 100, 100, 100, 100, 100, 100, 100, 0, 100, 0, 0, 0, 0, 0, 0, 100, 0, 0, 0, 0, 0, 0, 0, 100, 100, 100, 100, 100, 100, 0, 0, 100, 100, 0, 0, 0, 0, 100, 100, 100, 100, 100, 100, 0, 0, 100, 0, 100, 100, 100, 100, 100, 100, 0, 100, 100, 100, 100, 0, 100, 0, 0, 44.444447, 100, 100, 0, 100, 100, 0, 0, 100,
	}, slicesx.MapTransform(func(c *coverage.Report) float32 { return c.Branches }, reports...))
}
