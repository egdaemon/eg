// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package registration

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonDabade4DecodeGithubComEgdaemonEgRegistration(in *jlexer.Lexer, out *RegistrationSearchResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "items":
			if in.IsNull() {
				in.Skip()
				out.Items = nil
			} else {
				in.Delim('[')
				if out.Items == nil {
					if !in.IsDelim(']') {
						out.Items = make([]*Registration, 0, 8)
					} else {
						out.Items = []*Registration{}
					}
				} else {
					out.Items = (out.Items)[:0]
				}
				for !in.IsDelim(']') {
					var v1 *Registration
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(Registration)
						}
						(*v1).UnmarshalEasyJSON(in)
					}
					out.Items = append(out.Items, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDabade4EncodeGithubComEgdaemonEgRegistration(out *jwriter.Writer, in RegistrationSearchResponse) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Items) != 0 {
		const prefix string = ",\"items\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v2, v3 := range in.Items {
				if v2 > 0 {
					out.RawByte(',')
				}
				if v3 == nil {
					out.RawString("null")
				} else {
					(*v3).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RegistrationSearchResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDabade4EncodeGithubComEgdaemonEgRegistration(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RegistrationSearchResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDabade4EncodeGithubComEgdaemonEgRegistration(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RegistrationSearchResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDabade4DecodeGithubComEgdaemonEgRegistration(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RegistrationSearchResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDabade4DecodeGithubComEgdaemonEgRegistration(l, v)
}
func easyjsonDabade4DecodeGithubComEgdaemonEgRegistration1(in *jlexer.Lexer, out *RegistrationSearchRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDabade4EncodeGithubComEgdaemonEgRegistration1(out *jwriter.Writer, in RegistrationSearchRequest) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RegistrationSearchRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDabade4EncodeGithubComEgdaemonEgRegistration1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RegistrationSearchRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDabade4EncodeGithubComEgdaemonEgRegistration1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RegistrationSearchRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDabade4DecodeGithubComEgdaemonEgRegistration1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RegistrationSearchRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDabade4DecodeGithubComEgdaemonEgRegistration1(l, v)
}
func easyjsonDabade4DecodeGithubComEgdaemonEgRegistration2(in *jlexer.Lexer, out *RegistrationResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "registration":
			if in.IsNull() {
				in.Skip()
				out.Registration = nil
			} else {
				if out.Registration == nil {
					out.Registration = new(Registration)
				}
				(*out.Registration).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDabade4EncodeGithubComEgdaemonEgRegistration2(out *jwriter.Writer, in RegistrationResponse) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Registration != nil {
		const prefix string = ",\"registration\":"
		first = false
		out.RawString(prefix[1:])
		(*in.Registration).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RegistrationResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDabade4EncodeGithubComEgdaemonEgRegistration2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RegistrationResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDabade4EncodeGithubComEgdaemonEgRegistration2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RegistrationResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDabade4DecodeGithubComEgdaemonEgRegistration2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RegistrationResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDabade4DecodeGithubComEgdaemonEgRegistration2(l, v)
}
func easyjsonDabade4DecodeGithubComEgdaemonEgRegistration3(in *jlexer.Lexer, out *RegistrationRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "registration":
			if in.IsNull() {
				in.Skip()
				out.Registration = nil
			} else {
				if out.Registration == nil {
					out.Registration = new(Registration)
				}
				(*out.Registration).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDabade4EncodeGithubComEgdaemonEgRegistration3(out *jwriter.Writer, in RegistrationRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Registration != nil {
		const prefix string = ",\"registration\":"
		first = false
		out.RawString(prefix[1:])
		(*in.Registration).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RegistrationRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDabade4EncodeGithubComEgdaemonEgRegistration3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RegistrationRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDabade4EncodeGithubComEgdaemonEgRegistration3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RegistrationRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDabade4DecodeGithubComEgdaemonEgRegistration3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RegistrationRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDabade4DecodeGithubComEgdaemonEgRegistration3(l, v)
}
func easyjsonDabade4DecodeGithubComEgdaemonEgRegistration4(in *jlexer.Lexer, out *RegistrationGrantResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "registration":
			if in.IsNull() {
				in.Skip()
				out.Registration = nil
			} else {
				if out.Registration == nil {
					out.Registration = new(Registration)
				}
				(*out.Registration).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDabade4EncodeGithubComEgdaemonEgRegistration4(out *jwriter.Writer, in RegistrationGrantResponse) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Registration != nil {
		const prefix string = ",\"registration\":"
		first = false
		out.RawString(prefix[1:])
		(*in.Registration).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RegistrationGrantResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDabade4EncodeGithubComEgdaemonEgRegistration4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RegistrationGrantResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDabade4EncodeGithubComEgdaemonEgRegistration4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RegistrationGrantResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDabade4DecodeGithubComEgdaemonEgRegistration4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RegistrationGrantResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDabade4DecodeGithubComEgdaemonEgRegistration4(l, v)
}
func easyjsonDabade4DecodeGithubComEgdaemonEgRegistration5(in *jlexer.Lexer, out *RegistrationGrantRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "registration":
			if in.IsNull() {
				in.Skip()
				out.Registration = nil
			} else {
				if out.Registration == nil {
					out.Registration = new(Registration)
				}
				(*out.Registration).UnmarshalEasyJSON(in)
			}
		case "global":
			out.Global = bool(in.Bool())
		case "expiration":
			out.Expiration = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDabade4EncodeGithubComEgdaemonEgRegistration5(out *jwriter.Writer, in RegistrationGrantRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Registration != nil {
		const prefix string = ",\"registration\":"
		first = false
		out.RawString(prefix[1:])
		(*in.Registration).MarshalEasyJSON(out)
	}
	if in.Global {
		const prefix string = ",\"global\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Global))
	}
	if in.Expiration != 0 {
		const prefix string = ",\"expiration\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.Expiration))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RegistrationGrantRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDabade4EncodeGithubComEgdaemonEgRegistration5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RegistrationGrantRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDabade4EncodeGithubComEgdaemonEgRegistration5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RegistrationGrantRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDabade4DecodeGithubComEgdaemonEgRegistration5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RegistrationGrantRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDabade4DecodeGithubComEgdaemonEgRegistration5(l, v)
}
func easyjsonDabade4DecodeGithubComEgdaemonEgRegistration6(in *jlexer.Lexer, out *Registration) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "publickey":
			if in.IsNull() {
				in.Skip()
				out.Publickey = nil
			} else {
				out.Publickey = in.Bytes()
			}
		case "authzed_at":
			out.AuthzedAt = string(in.String())
		case "expires_at":
			out.ExpiresAt = string(in.String())
		case "os":
			out.Os = string(in.String())
		case "arch":
			out.Arch = string(in.String())
		case "cores":
			out.Cores = uint64(in.Uint64())
		case "memory":
			out.Memory = uint64(in.Uint64())
		case "labels":
			if in.IsNull() {
				in.Skip()
				out.Labels = nil
			} else {
				in.Delim('[')
				if out.Labels == nil {
					if !in.IsDelim(']') {
						out.Labels = make([]string, 0, 4)
					} else {
						out.Labels = []string{}
					}
				} else {
					out.Labels = (out.Labels)[:0]
				}
				for !in.IsDelim(']') {
					var v5 string
					v5 = string(in.String())
					out.Labels = append(out.Labels, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDabade4EncodeGithubComEgdaemonEgRegistration6(out *jwriter.Writer, in Registration) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Id != "" {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Id))
	}
	if in.Description != "" {
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Description))
	}
	if len(in.Publickey) != 0 {
		const prefix string = ",\"publickey\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Base64Bytes(in.Publickey)
	}
	if in.AuthzedAt != "" {
		const prefix string = ",\"authzed_at\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AuthzedAt))
	}
	if in.ExpiresAt != "" {
		const prefix string = ",\"expires_at\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ExpiresAt))
	}
	if in.Os != "" {
		const prefix string = ",\"os\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Os))
	}
	if in.Arch != "" {
		const prefix string = ",\"arch\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Arch))
	}
	if in.Cores != 0 {
		const prefix string = ",\"cores\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.Cores))
	}
	if in.Memory != 0 {
		const prefix string = ",\"memory\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.Memory))
	}
	if len(in.Labels) != 0 {
		const prefix string = ",\"labels\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v8, v9 := range in.Labels {
				if v8 > 0 {
					out.RawByte(',')
				}
				out.String(string(v9))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Registration) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDabade4EncodeGithubComEgdaemonEgRegistration6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Registration) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDabade4EncodeGithubComEgdaemonEgRegistration6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Registration) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDabade4DecodeGithubComEgdaemonEgRegistration6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Registration) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDabade4DecodeGithubComEgdaemonEgRegistration6(l, v)
}
