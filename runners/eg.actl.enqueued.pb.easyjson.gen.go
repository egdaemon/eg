// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package runners

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson61363d27DecodeGithubComEgdaemonEgRunners(in *jlexer.Lexer, out *EnqueuedUpdateResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "enqueued":
			if in.IsNull() {
				in.Skip()
				out.Enqueued = nil
			} else {
				if out.Enqueued == nil {
					out.Enqueued = new(Enqueued)
				}
				(*out.Enqueued).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson61363d27EncodeGithubComEgdaemonEgRunners(out *jwriter.Writer, in EnqueuedUpdateResponse) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Enqueued != nil {
		const prefix string = ",\"enqueued\":"
		first = false
		out.RawString(prefix[1:])
		(*in.Enqueued).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EnqueuedUpdateResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson61363d27EncodeGithubComEgdaemonEgRunners(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EnqueuedUpdateResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson61363d27EncodeGithubComEgdaemonEgRunners(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EnqueuedUpdateResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson61363d27DecodeGithubComEgdaemonEgRunners(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EnqueuedUpdateResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson61363d27DecodeGithubComEgdaemonEgRunners(l, v)
}
func easyjson61363d27DecodeGithubComEgdaemonEgRunners1(in *jlexer.Lexer, out *EnqueuedUpdateRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "enqueued":
			if in.IsNull() {
				in.Skip()
				out.Enqueued = nil
			} else {
				if out.Enqueued == nil {
					out.Enqueued = new(Enqueued)
				}
				(*out.Enqueued).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson61363d27EncodeGithubComEgdaemonEgRunners1(out *jwriter.Writer, in EnqueuedUpdateRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Enqueued != nil {
		const prefix string = ",\"enqueued\":"
		first = false
		out.RawString(prefix[1:])
		(*in.Enqueued).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EnqueuedUpdateRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson61363d27EncodeGithubComEgdaemonEgRunners1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EnqueuedUpdateRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson61363d27EncodeGithubComEgdaemonEgRunners1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EnqueuedUpdateRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson61363d27DecodeGithubComEgdaemonEgRunners1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EnqueuedUpdateRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson61363d27DecodeGithubComEgdaemonEgRunners1(l, v)
}
func easyjson61363d27DecodeGithubComEgdaemonEgRunners2(in *jlexer.Lexer, out *EnqueuedSearchResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "next":
			if in.IsNull() {
				in.Skip()
				out.Next = nil
			} else {
				if out.Next == nil {
					out.Next = new(EnqueuedSearchRequest)
				}
				(*out.Next).UnmarshalEasyJSON(in)
			}
		case "items":
			if in.IsNull() {
				in.Skip()
				out.Items = nil
			} else {
				in.Delim('[')
				if out.Items == nil {
					if !in.IsDelim(']') {
						out.Items = make([]*Enqueued, 0, 8)
					} else {
						out.Items = []*Enqueued{}
					}
				} else {
					out.Items = (out.Items)[:0]
				}
				for !in.IsDelim(']') {
					var v1 *Enqueued
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(Enqueued)
						}
						(*v1).UnmarshalEasyJSON(in)
					}
					out.Items = append(out.Items, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson61363d27EncodeGithubComEgdaemonEgRunners2(out *jwriter.Writer, in EnqueuedSearchResponse) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Next != nil {
		const prefix string = ",\"next\":"
		first = false
		out.RawString(prefix[1:])
		(*in.Next).MarshalEasyJSON(out)
	}
	if len(in.Items) != 0 {
		const prefix string = ",\"items\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v2, v3 := range in.Items {
				if v2 > 0 {
					out.RawByte(',')
				}
				if v3 == nil {
					out.RawString("null")
				} else {
					(*v3).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EnqueuedSearchResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson61363d27EncodeGithubComEgdaemonEgRunners2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EnqueuedSearchResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson61363d27EncodeGithubComEgdaemonEgRunners2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EnqueuedSearchResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson61363d27DecodeGithubComEgdaemonEgRunners2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EnqueuedSearchResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson61363d27DecodeGithubComEgdaemonEgRunners2(l, v)
}
func easyjson61363d27DecodeGithubComEgdaemonEgRunners3(in *jlexer.Lexer, out *EnqueuedSearchRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "query":
			out.Query = string(in.String())
		case "offset":
			out.Offset = uint64(in.Uint64())
		case "limit":
			out.Limit = uint64(in.Uint64())
		case "arch":
			out.Arch = string(in.String())
		case "os":
			out.Os = string(in.String())
		case "cores":
			out.Cores = uint64(in.Uint64())
		case "memory":
			out.Memory = uint64(in.Uint64())
		case "vram":
			out.Vram = uint64(in.Uint64())
		case "cluster_id":
			out.ClusterId = string(in.String())
		case "vcsuri":
			out.Vcsuri = string(in.String())
		case "labels":
			if in.IsNull() {
				in.Skip()
				out.Labels = nil
			} else {
				in.Delim('[')
				if out.Labels == nil {
					if !in.IsDelim(']') {
						out.Labels = make([]string, 0, 4)
					} else {
						out.Labels = []string{}
					}
				} else {
					out.Labels = (out.Labels)[:0]
				}
				for !in.IsDelim(']') {
					var v4 string
					v4 = string(in.String())
					out.Labels = append(out.Labels, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson61363d27EncodeGithubComEgdaemonEgRunners3(out *jwriter.Writer, in EnqueuedSearchRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Query != "" {
		const prefix string = ",\"query\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Query))
	}
	if in.Offset != 0 {
		const prefix string = ",\"offset\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.Offset))
	}
	if in.Limit != 0 {
		const prefix string = ",\"limit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.Limit))
	}
	if in.Arch != "" {
		const prefix string = ",\"arch\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Arch))
	}
	if in.Os != "" {
		const prefix string = ",\"os\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Os))
	}
	if in.Cores != 0 {
		const prefix string = ",\"cores\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.Cores))
	}
	if in.Memory != 0 {
		const prefix string = ",\"memory\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.Memory))
	}
	if in.Vram != 0 {
		const prefix string = ",\"vram\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.Vram))
	}
	if in.ClusterId != "" {
		const prefix string = ",\"cluster_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ClusterId))
	}
	if in.Vcsuri != "" {
		const prefix string = ",\"vcsuri\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Vcsuri))
	}
	if len(in.Labels) != 0 {
		const prefix string = ",\"labels\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v5, v6 := range in.Labels {
				if v5 > 0 {
					out.RawByte(',')
				}
				out.String(string(v6))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EnqueuedSearchRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson61363d27EncodeGithubComEgdaemonEgRunners3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EnqueuedSearchRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson61363d27EncodeGithubComEgdaemonEgRunners3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EnqueuedSearchRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson61363d27DecodeGithubComEgdaemonEgRunners3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EnqueuedSearchRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson61363d27DecodeGithubComEgdaemonEgRunners3(l, v)
}
func easyjson61363d27DecodeGithubComEgdaemonEgRunners4(in *jlexer.Lexer, out *EnqueuedFindResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "enqueued":
			if in.IsNull() {
				in.Skip()
				out.Enqueued = nil
			} else {
				if out.Enqueued == nil {
					out.Enqueued = new(Enqueued)
				}
				(*out.Enqueued).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson61363d27EncodeGithubComEgdaemonEgRunners4(out *jwriter.Writer, in EnqueuedFindResponse) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Enqueued != nil {
		const prefix string = ",\"enqueued\":"
		first = false
		out.RawString(prefix[1:])
		(*in.Enqueued).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EnqueuedFindResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson61363d27EncodeGithubComEgdaemonEgRunners4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EnqueuedFindResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson61363d27EncodeGithubComEgdaemonEgRunners4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EnqueuedFindResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson61363d27DecodeGithubComEgdaemonEgRunners4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EnqueuedFindResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson61363d27DecodeGithubComEgdaemonEgRunners4(l, v)
}
func easyjson61363d27DecodeGithubComEgdaemonEgRunners5(in *jlexer.Lexer, out *EnqueuedFindRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "enqueued":
			if in.IsNull() {
				in.Skip()
				out.Enqueued = nil
			} else {
				if out.Enqueued == nil {
					out.Enqueued = new(Enqueued)
				}
				(*out.Enqueued).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson61363d27EncodeGithubComEgdaemonEgRunners5(out *jwriter.Writer, in EnqueuedFindRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Enqueued != nil {
		const prefix string = ",\"enqueued\":"
		first = false
		out.RawString(prefix[1:])
		(*in.Enqueued).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EnqueuedFindRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson61363d27EncodeGithubComEgdaemonEgRunners5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EnqueuedFindRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson61363d27EncodeGithubComEgdaemonEgRunners5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EnqueuedFindRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson61363d27DecodeGithubComEgdaemonEgRunners5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EnqueuedFindRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson61363d27DecodeGithubComEgdaemonEgRunners5(l, v)
}
func easyjson61363d27DecodeGithubComEgdaemonEgRunners6(in *jlexer.Lexer, out *EnqueuedDownloadRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson61363d27EncodeGithubComEgdaemonEgRunners6(out *jwriter.Writer, in EnqueuedDownloadRequest) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EnqueuedDownloadRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson61363d27EncodeGithubComEgdaemonEgRunners6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EnqueuedDownloadRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson61363d27EncodeGithubComEgdaemonEgRunners6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EnqueuedDownloadRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson61363d27DecodeGithubComEgdaemonEgRunners6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EnqueuedDownloadRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson61363d27DecodeGithubComEgdaemonEgRunners6(l, v)
}
func easyjson61363d27DecodeGithubComEgdaemonEgRunners7(in *jlexer.Lexer, out *EnqueuedDequeueResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "enqueued":
			if in.IsNull() {
				in.Skip()
				out.Enqueued = nil
			} else {
				if out.Enqueued == nil {
					out.Enqueued = new(Enqueued)
				}
				(*out.Enqueued).UnmarshalEasyJSON(in)
			}
		case "access_token":
			out.AccessToken = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson61363d27EncodeGithubComEgdaemonEgRunners7(out *jwriter.Writer, in EnqueuedDequeueResponse) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Enqueued != nil {
		const prefix string = ",\"enqueued\":"
		first = false
		out.RawString(prefix[1:])
		(*in.Enqueued).MarshalEasyJSON(out)
	}
	if in.AccessToken != "" {
		const prefix string = ",\"access_token\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AccessToken))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EnqueuedDequeueResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson61363d27EncodeGithubComEgdaemonEgRunners7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EnqueuedDequeueResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson61363d27EncodeGithubComEgdaemonEgRunners7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EnqueuedDequeueResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson61363d27DecodeGithubComEgdaemonEgRunners7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EnqueuedDequeueResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson61363d27DecodeGithubComEgdaemonEgRunners7(l, v)
}
func easyjson61363d27DecodeGithubComEgdaemonEgRunners8(in *jlexer.Lexer, out *EnqueuedCreateResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "enqueued":
			if in.IsNull() {
				in.Skip()
				out.Enqueued = nil
			} else {
				if out.Enqueued == nil {
					out.Enqueued = new(Enqueued)
				}
				(*out.Enqueued).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson61363d27EncodeGithubComEgdaemonEgRunners8(out *jwriter.Writer, in EnqueuedCreateResponse) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Enqueued != nil {
		const prefix string = ",\"enqueued\":"
		first = false
		out.RawString(prefix[1:])
		(*in.Enqueued).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EnqueuedCreateResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson61363d27EncodeGithubComEgdaemonEgRunners8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EnqueuedCreateResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson61363d27EncodeGithubComEgdaemonEgRunners8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EnqueuedCreateResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson61363d27DecodeGithubComEgdaemonEgRunners8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EnqueuedCreateResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson61363d27DecodeGithubComEgdaemonEgRunners8(l, v)
}
func easyjson61363d27DecodeGithubComEgdaemonEgRunners9(in *jlexer.Lexer, out *EnqueuedCreateRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "enqueued":
			if in.IsNull() {
				in.Skip()
				out.Enqueued = nil
			} else {
				if out.Enqueued == nil {
					out.Enqueued = new(Enqueued)
				}
				(*out.Enqueued).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson61363d27EncodeGithubComEgdaemonEgRunners9(out *jwriter.Writer, in EnqueuedCreateRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Enqueued != nil {
		const prefix string = ",\"enqueued\":"
		first = false
		out.RawString(prefix[1:])
		(*in.Enqueued).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EnqueuedCreateRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson61363d27EncodeGithubComEgdaemonEgRunners9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EnqueuedCreateRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson61363d27EncodeGithubComEgdaemonEgRunners9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EnqueuedCreateRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson61363d27DecodeGithubComEgdaemonEgRunners9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EnqueuedCreateRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson61363d27DecodeGithubComEgdaemonEgRunners9(l, v)
}
func easyjson61363d27DecodeGithubComEgdaemonEgRunners10(in *jlexer.Lexer, out *EnqueuedCompletedResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "enqueued":
			if in.IsNull() {
				in.Skip()
				out.Enqueued = nil
			} else {
				if out.Enqueued == nil {
					out.Enqueued = new(Enqueued)
				}
				(*out.Enqueued).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson61363d27EncodeGithubComEgdaemonEgRunners10(out *jwriter.Writer, in EnqueuedCompletedResponse) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Enqueued != nil {
		const prefix string = ",\"enqueued\":"
		first = false
		out.RawString(prefix[1:])
		(*in.Enqueued).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EnqueuedCompletedResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson61363d27EncodeGithubComEgdaemonEgRunners10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EnqueuedCompletedResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson61363d27EncodeGithubComEgdaemonEgRunners10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EnqueuedCompletedResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson61363d27DecodeGithubComEgdaemonEgRunners10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EnqueuedCompletedResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson61363d27DecodeGithubComEgdaemonEgRunners10(l, v)
}
func easyjson61363d27DecodeGithubComEgdaemonEgRunners11(in *jlexer.Lexer, out *EnqueuedCompletedRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson61363d27EncodeGithubComEgdaemonEgRunners11(out *jwriter.Writer, in EnqueuedCompletedRequest) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EnqueuedCompletedRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson61363d27EncodeGithubComEgdaemonEgRunners11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EnqueuedCompletedRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson61363d27EncodeGithubComEgdaemonEgRunners11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EnqueuedCompletedRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson61363d27DecodeGithubComEgdaemonEgRunners11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EnqueuedCompletedRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson61363d27DecodeGithubComEgdaemonEgRunners11(l, v)
}
func easyjson61363d27DecodeGithubComEgdaemonEgRunners12(in *jlexer.Lexer, out *Enqueued) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = string(in.String())
		case "created_at":
			out.CreatedAt = string(in.String())
		case "updated_at":
			out.UpdatedAt = string(in.String())
		case "arch":
			out.Arch = string(in.String())
		case "os":
			out.Os = string(in.String())
		case "cores":
			out.Cores = uint64(in.Uint64())
		case "memory":
			out.Memory = uint64(in.Uint64())
		case "vram":
			out.Vram = uint64(in.Uint64())
		case "ttl":
			out.Ttl = uint64(in.Uint64())
		case "cluster_id":
			out.ClusterId = string(in.String())
		case "entry":
			out.Entry = string(in.String())
		case "initiated_at":
			out.InitiatedAt = string(in.String())
		case "completed_at":
			out.CompletedAt = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "vcsuri":
			out.Vcsuri = string(in.String())
		case "allow_shared":
			out.AllowShared = bool(in.Bool())
		case "labels":
			if in.IsNull() {
				in.Skip()
				out.Labels = nil
			} else {
				in.Delim('[')
				if out.Labels == nil {
					if !in.IsDelim(']') {
						out.Labels = make([]string, 0, 4)
					} else {
						out.Labels = []string{}
					}
				} else {
					out.Labels = (out.Labels)[:0]
				}
				for !in.IsDelim(']') {
					var v7 string
					v7 = string(in.String())
					out.Labels = append(out.Labels, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson61363d27EncodeGithubComEgdaemonEgRunners12(out *jwriter.Writer, in Enqueued) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Id != "" {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Id))
	}
	if in.CreatedAt != "" {
		const prefix string = ",\"created_at\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CreatedAt))
	}
	if in.UpdatedAt != "" {
		const prefix string = ",\"updated_at\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.UpdatedAt))
	}
	if in.Arch != "" {
		const prefix string = ",\"arch\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Arch))
	}
	if in.Os != "" {
		const prefix string = ",\"os\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Os))
	}
	if in.Cores != 0 {
		const prefix string = ",\"cores\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.Cores))
	}
	if in.Memory != 0 {
		const prefix string = ",\"memory\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.Memory))
	}
	if in.Vram != 0 {
		const prefix string = ",\"vram\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.Vram))
	}
	if in.Ttl != 0 {
		const prefix string = ",\"ttl\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.Ttl))
	}
	if in.ClusterId != "" {
		const prefix string = ",\"cluster_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ClusterId))
	}
	if in.Entry != "" {
		const prefix string = ",\"entry\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Entry))
	}
	if in.InitiatedAt != "" {
		const prefix string = ",\"initiated_at\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.InitiatedAt))
	}
	if in.CompletedAt != "" {
		const prefix string = ",\"completed_at\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CompletedAt))
	}
	if in.Description != "" {
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Description))
	}
	if in.Vcsuri != "" {
		const prefix string = ",\"vcsuri\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Vcsuri))
	}
	if in.AllowShared {
		const prefix string = ",\"allow_shared\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.AllowShared))
	}
	if len(in.Labels) != 0 {
		const prefix string = ",\"labels\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v8, v9 := range in.Labels {
				if v8 > 0 {
					out.RawByte(',')
				}
				out.String(string(v9))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Enqueued) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson61363d27EncodeGithubComEgdaemonEgRunners12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Enqueued) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson61363d27EncodeGithubComEgdaemonEgRunners12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Enqueued) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson61363d27DecodeGithubComEgdaemonEgRunners12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Enqueued) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson61363d27DecodeGithubComEgdaemonEgRunners12(l, v)
}
